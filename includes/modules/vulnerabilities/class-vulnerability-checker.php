<?php
/**
 * Vulnerability Checker
 * Verifica vulnerabilidades en plugins, themes y WordPress core
 */

if (!defined('ABSPATH')) {
    exit;
}

class SpamGuard_Vulnerability_Checker {
    
    private static $instance = null;
    private $api;
    
    public static function get_instance() {
        if (null === self::$instance) {
            self::$instance = new self();
        }
        return self::$instance;
    }
    
    private function __construct() {
        $this->api = SpamGuard_API::get_instance();
        
        // Hook para escaneo automático diario
        add_action('spamguard_daily_vulnerability_check', array($this, 'daily_vulnerability_scan'));
        
        // Programar escaneo diario si no existe
        if (!wp_next_scheduled('spamguard_daily_vulnerability_check')) {
            wp_schedule_event(time(), 'daily', 'spamguard_daily_vulnerability_check');
        }
    }
    
    /**
     * Escanear vulnerabilidades en todos los componentes
     */
    public function scan_all() {
        $components = $this->get_installed_components();
        
        $response = $this->api->post('/vulnerabilities/check', array(
            'components' => $components
        ));
        
        if (is_wp_error($response)) {
            return array(
                'success' => false,
                'error' => $response->get_error_message()
            );
        }
        
        // Guardar resultados
        $this->save_scan_results($response);
        
        return $response;
    }
    
    /**
     * Obtener componentes instalados (plugins, themes, core)
     */
    private function get_installed_components() {
        $components = array();
        
        // 1. WordPress Core
        $components[] = array(
            'type' => 'core',
            'slug' => 'wordpress',
            'version' => get_bloginfo('version'),
            'name' => 'WordPress Core'
        );
        
        // 2. Plugins activos
        if (!function_exists('get_plugins')) {
            require_once ABSPATH . 'wp-admin/includes/plugin.php';
        }
        
        $all_plugins = get_plugins();
        $active_plugins = get_option('active_plugins', array());
        
        foreach ($active_plugins as $plugin_file) {
            if (isset($all_plugins[$plugin_file])) {
                $plugin = $all_plugins[$plugin_file];
                
                // Obtener slug del plugin (nombre del directorio)
                $slug = dirname($plugin_file);
                if ($slug === '.') {
                    $slug = basename($plugin_file, '.php');
                }
                
                $components[] = array(
                    'type' => 'plugin',
                    'slug' => $slug,
                    'version' => $plugin['Version'],
                    'name' => $plugin['Name']
                );
            }
        }
        
        // 3. Theme activo
        $theme = wp_get_theme();
        
        $components[] = array(
            'type' => 'theme',
            'slug' => $theme->get_stylesheet(),
            'version' => $theme->get('Version'),
            'name' => $theme->get('Name')
        );
        
        // 4. Parent theme (si existe)
        if ($theme->parent()) {
            $parent = $theme->parent();
            $components[] = array(
                'type' => 'theme',
                'slug' => $parent->get_stylesheet(),
                'version' => $parent->get('Version'),
                'name' => $parent->get('Name')
            );
        }
        
        return $components;
    }
    
    /**
     * Guardar resultados del escaneo
     */
    private function save_scan_results($results) {
        global $wpdb;
        $table = $wpdb->prefix . 'spamguard_vulnerabilities';
        
        // Limpiar tabla (eliminar escaneo anterior)
        $wpdb->query("TRUNCATE TABLE $table");
        
        // Guardar vulnerabilidades encontradas
        if (isset($results['vulnerable_components'])) {
            foreach ($results['vulnerable_components'] as $component) {
                foreach ($component['vulnerabilities'] as $vuln) {
                    $wpdb->insert(
                        $table,
                        array(
                            'component_type' => $component['type'],
                            'component_slug' => $component['slug'],
                            'component_version' => $component['version'],
                            'cve_id' => $vuln['cve_id'],
                            'severity' => $vuln['severity'],
                            'title' => $vuln['title'],
                            'description' => $vuln['description'],
                            'vuln_type' => $vuln['vuln_type'],
                            'patched_in' => $vuln['patched_in'],
                            'reference_urls' => json_encode($vuln['reference_urls']),
                            'detected_at' => current_time('mysql')
                        ),
                        array('%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s')
                    );
                }
            }
        }
        
        // Actualizar timestamp del último escaneo
        update_option('spamguard_last_vulnerability_scan', current_time('mysql'));
        update_option('spamguard_vulnerability_count', $results['vulnerable_count']);
    }
    
    /**
     * Obtener vulnerabilidades guardadas
     */
    public function get_vulnerabilities($filters = array()) {
        global $wpdb;
        $table = $wpdb->prefix . 'spamguard_vulnerabilities';
        
        $where = array('1=1');
        
        if (isset($filters['severity'])) {
            $where[] = $wpdb->prepare('severity = %s', $filters['severity']);
        }
        
        if (isset($filters['component_type'])) {
            $where[] = $wpdb->prepare('component_type = %s', $filters['component_type']);
        }
        
        $where_sql = implode(' AND ', $where);
        
        return $wpdb->get_results("SELECT * FROM $table WHERE $where_sql ORDER BY severity DESC, detected_at DESC");
    }
    
    /**
     * Escaneo automático diario
     */
    public function daily_vulnerability_scan() {
        // Solo si está configurado
        if (!SpamGuard_Core::is_configured()) {
            return;
        }
        
        $this->scan_all();
    }
    
    /**
     * Obtener estadísticas
     */
    public function get_stats() {
        global $wpdb;
        $table = $wpdb->prefix . 'spamguard_vulnerabilities';
        
        $total = $wpdb->get_var("SELECT COUNT(*) FROM $table");
        
        $by_severity = array(
            'critical' => $wpdb->get_var("SELECT COUNT(*) FROM $table WHERE severity = 'critical'"),
            'high' => $wpdb->get_var("SELECT COUNT(*) FROM $table WHERE severity = 'high'"),
            'medium' => $wpdb->get_var("SELECT COUNT(*) FROM $table WHERE severity = 'medium'"),
            'low' => $wpdb->get_var("SELECT COUNT(*) FROM $table WHERE severity = 'low'")
        );
        
        return array(
            'total' => $total,
            'by_severity' => $by_severity,
            'last_scan' => get_option('spamguard_last_vulnerability_scan')
        );
    }
}
